#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    char items[MAX_SIZE];
};

// Function prototypes
void push(struct Stack *s, char item);
char pop(struct Stack *s);
int isOperator(char ch);
int precedence(char ch);
void infixToPrefix(char infix[], char prefix[]);
void infixToPostfix(char infix[], char postfix[]);

// Stack functions
void push(struct Stack *s, char item) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        exit(EXIT_FAILURE);
    } else {
        s->items[++(s->top)] = item;
    }
}

char pop(struct Stack *s) {
    if (s->top == -1) {
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    } else {
        return s->items[(s->top)--];
    }
}

// Check if the character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

// Return the precedence of an operator
int precedence(char ch) {
    if (ch == '+' || ch == '-')
        return 1;
    else if (ch == '*' || ch == '/')
        return 2;
    else
        return 0;
}

// Convert infix expression to prefix expression
void infixToPrefix(char infix[], char prefix[]) {
    struct Stack operatorStack;
    operatorStack.top = -1;
    int i, j = 0;
    int len = strlen(infix);

    // Reverse the infix expression
    for (i = len - 1; i >= 0; i--) {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';
    }

    // Algorithm to convert infix to prefix
    for (i = 0; i < len; i++) {
        if ((infix[i] >= 'a' && infix[i] <= 'z') || (infix[i] >= 'A' && infix[i] <= 'Z')) {
            prefix[j++] = infix[i];
        } else if (infix[i] == '(') {
            push(&operatorStack, infix[i]);
        } else if (infix[i] == ')') {
            while (operatorStack.top != -1 && operatorStack.items[operatorStack.top] != '(') {
                prefix[j++] = pop(&operatorStack);
            }
            pop(&operatorStack);  // Pop '('
        } else if (isOperator(infix[i])) {
            while (operatorStack.top != -1 && precedence(operatorStack.items[operatorStack.top]) >= precedence(infix[i])) {
                prefix[j++] = pop(&operatorStack);
            }
            push(&operatorStack, infix[i]);
        }
    }

    // Pop remaining operators from the stack
    while (operatorStack.top != -1) {
        prefix[j++] = pop(&operatorStack);
    }

    prefix[j] = '\0';
}

// Convert infix expression to postfix expression
void infixToPostfix(char infix[], char postfix[]) {
    struct Stack operatorStack;
    operatorStack.top = -1;
    int i, j = 0;
    int len = strlen(infix);

    // Algorithm to convert infix to postfix
    for (i = 0; i < len; i++) {
        if ((infix[i] >= 'a' && infix[i] <= 'z') || (infix[i] >= 'A' && infix[i] <= 'Z')) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            push(&operatorStack, infix[i]);
        } else if (infix[i] == ')') {
            while (operatorStack.top != -1 && operatorStack.items[operatorStack.top] != '(') {
                postfix[j++] = pop(&operatorStack);
            }
            pop(&operatorStack);  // Pop '('
        } else if (isOperator(infix[i])) {
            while (operatorStack.top != -1 && precedence(operatorStack.items[operatorStack.top]) >= precedence(infix[i])) {
                postfix[j++] = pop(&operatorStack);
            }
            push(&operatorStack, infix[i]);
        }
    }

    // Pop remaining operators from the stack
    while (operatorStack.top != -1) {
        postfix[j++] = pop(&operatorStack);
    }

    postfix[j] = '\0';
}

int main() {
    char infix[MAX_SIZE];
    char prefix[MAX_SIZE];
    char postfix[MAX_SIZE];

    // Input infix expression
    printf("Enter infix expression: ");
    scanf("%s", infix);

    // Convert infix to prefix
    infixToPrefix(infix, prefix);
    printf("Prefix expression: %s\n", prefix);

    // Convert infix to postfix
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

    return 0;
}
